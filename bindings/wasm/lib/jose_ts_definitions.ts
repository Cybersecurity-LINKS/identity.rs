/*
 Generated by typeshare 1.0.0
*/

/**
 * JSON Web Key.
 * [More Info](https://tools.ietf.org/html/rfc7517#section-4)
 */
export interface Jwk {
	/**
	 * Key Type.
	 * Identifies the cryptographic algorithm family used with the key.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.1)
	 */
	kty: JwkType;
	/**
	 * Public Key Use.
	 * Identifies the intended use of the public key.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.2)
	 */
	use?: JwkUse;
	/**
	 * Key Operations.
	 * Identifies the operation(s) for which the key is intended to be used.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.3)
	 */
	key_ops?: JwkOperation[];
	/**
	 * Algorithm.
	 * Identifies the algorithm intended for use with the key.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.4)
	 */
	alg?: string;
	/**
	 * Key ID.
	 * Used to match a specific key among a set of keys within a JWK Set.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.5)
	 */
	kid?: string;
	/**
	 * X.509 URL.
	 * A URI that refers to a resource for an X.509 public key certificate or
	 * certificate chain.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.6)
	 */
	x5u?: Url;
	/**
	 * X.509 Certificate Chain.
	 * Contains a chain of one or more PKIX certificates.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.7)
	 */
	x5c?: string[];
	/**
	 * X.509 Certificate SHA-1 Thumbprint.
	 * A base64url-encoded SHA-1 thumbprint of the DER encoding of an X.509
	 * certificate.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.8)
	 */
	x5t?: string;
	/**
	 * X.509 Certificate SHA-256 Thumbprint.
	 * A base64url-encoded SHA-256 thumbprint of the DER encoding of an X.509
	 * certificate.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4.9)
	 */
	x5t#S256?: string;
	/**
	 * Type-Specific Key Properties.
	 * [More Info](https://tools.ietf.org/html/rfc7517#section-4)
	 */
	params: JwkParams;
}

/**
 * Parameters for Elliptic Curve Keys.
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2)
 */
export interface JwkParamsEc {
	/**
	 * Identifies the cryptographic curve used with the key.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.1.1)
	 */
	crv: string;
	/**
	 * The `x` coordinate for the Elliptic Curve point as a base64url-encoded
	 * value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.1.2)
	 */
	x: string;
	/**
	 * The `y` coordinate for the Elliptic Curve point as a base64url-encoded
	 * value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.1.3)
	 */
	y: string;
	/**
	 * The Elliptic Curve private key as a base64url-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.2.2.1)
	 */
	d?: string;
}

/**
 * Parameters for RSA Keys.
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3)
 */
export interface JwkParamsRsa {
	/**
	 * The modulus value for the RSA public key as a base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.1.1)
	 */
	n: string;
	/**
	 * The exponent value for the RSA public key as a base64urlUInt-encoded
	 * value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.1.2)
	 */
	e: string;
	/**
	 * The private exponent value for the RSA private key as a
	 * base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.1)
	 */
	d?: string;
	/**
	 * The first prime factor as a base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.2)
	 */
	p?: string;
	/**
	 * The second prime factor as a base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.3)
	 */
	q?: string;
	/**
	 * The Chinese Remainder Theorem (CRT) exponent of the first factor as a
	 * base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.4)
	 */
	dp?: string;
	/**
	 * The CRT exponent of the second factor as a base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.5)
	 */
	dq?: string;
	/**
	 * The CRT coefficient of the second factor as a base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.6)
	 */
	qi?: string;
	/**
	 * An array of information about any third and subsequent primes, should they
	 * exist.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7)
	 */
	oth?: JwkParamsRsaPrime[];
}

/**
 * Parameters for RSA Primes
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7)
 */
export interface JwkParamsRsaPrime {
	/**
	 * The value of a subsequent prime factor as a base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7.1)
	 */
	r: string;
	/**
	 * The CRT exponent of the corresponding prime factor as a
	 * base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7.2)
	 */
	d: string;
	/**
	 * The CRT coefficient of the corresponding prime factor as a
	 * base64urlUInt-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.3.2.7.3)
	 */
	t: string;
}

/**
 * Parameters for Symmetric Keys.
 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.4)
 */
export interface JwkParamsOct {
	/**
	 * The symmetric key as a base64url-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc7518#section-6.4.1)
	 */
	k: string;
}

/**
 * Parameters for Octet Key Pairs.
 * [More Info](https://tools.ietf.org/html/rfc8037#section-2)
 */
export interface JwkParamsOkp {
	/**
	 * The subtype of the key pair.
	 * [More Info](https://tools.ietf.org/html/rfc8037#section-2)
	 */
	crv: string;
	/**
	 * The public key as a base64url-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc8037#section-2)
	 */
	x: string;
	/**
	 * The private key as a base64url-encoded value.
	 * [More Info](https://tools.ietf.org/html/rfc8037#section-2)
	 */
	d?: string;
}

/**
 * Supported Elliptic Curves.
 * [More Info](https://www.iana.org/assignments/jose/jose.xhtml#web-key-elliptic-curve)
 */
export enum EcCurve {
	/** P-256 Curve. */
	P256 = "P256",
	/** P-384 Curve. */
	P384 = "P384",
	/** P-521 Curve. */
	P521 = "P521",
	/** SECG secp256k1 curve. */
	Secp256K1 = "Secp256K1",
}

/**
 * Supported Elliptic Curves.
 * [More Info](https://www.iana.org/assignments/jose/jose.xhtml#web-key-elliptic-curve)
 */
export enum EdCurve {
	/** Ed25519 signature algorithm key pairs. */
	Ed25519 = "Ed25519",
	/** Ed448 signature algorithm key pairs. */
	Ed448 = "Ed448",
}

/**
 * Supported algorithms for the JSON Web Key `key_ops` property.
 * [More Info](https://www.iana.org/assignments/jose/jose.xhtml#web-key-operations)
 */
export enum JwkOperation {
	/** Compute digital signature or MAC. */
	Sign = "sign",
	/** Verify digital signature or MAC. */
	Verify = "verify",
	/** Encrypt content. */
	Encrypt = "encrypt",
	/** Decrypt content and validate decryption, if applicable. */
	Decrypt = "decrypt",
	/** Encrypt key. */
	WrapKey = "wrapKey",
	/** Decrypt key and validate decryption, if applicable. */
	UnwrapKey = "unwrapKey",
	/** Derive key. */
	DeriveKey = "deriveKey",
	/** Derive bits not to be used as a key. */
	DeriveBits = "deriveBits",
}

/**
 * Supported types for the JSON Web Key `typ` property.
 * [More Info](https://www.iana.org/assignments/jose/jose.xhtml#web-key-types)
 */
export enum JwkType {
	/** Elliptic Curve. */
	Ec = "EC",
	/** RSA. */
	Rsa = "RSA",
	/** Octet sequence. */
	Oct = "oct",
	/** Octet string key pairs. */
	Okp = "OKP",
}

/**
 * Supported algorithms for the JSON Web Key `use` property.
 * [More Info](https://www.iana.org/assignments/jose/jose.xhtml#web-key-use)
 */
export enum JwkUse {
	/** Digital Signature or MAC. */
	Signature = "sig",
	/** Encryption. */
	Encryption = "enc",
}

/**
 * Supported algorithms for the JSON Web Signatures `alg` claim.
 * [More Info](https://www.iana.org/assignments/jose/jose.xhtml#web-signature-encryption-algorithms)
 */
export enum JwsAlgorithm {
	/** HMAC using SHA-256 */
	HS256 = "HS256",
	/** HMAC using SHA-384 */
	HS384 = "HS384",
	/** HMAC using SHA-512 */
	HS512 = "HS512",
	/** RSASSA-PKCS1-v1_5 using SHA-256 */
	RS256 = "RS256",
	/** RSASSA-PKCS1-v1_5 using SHA-384 */
	RS384 = "RS384",
	/** RSASSA-PKCS1-v1_5 using SHA-512 */
	RS512 = "RS512",
	/** RSASSA-PSS using SHA-256 and MGF1 with SHA-256 */
	PS256 = "PS256",
	/** RSASSA-PSS using SHA-384 and MGF1 with SHA-384 */
	PS384 = "PS384",
	/** RSASSA-PSS using SHA-512 and MGF1 with SHA-512 */
	PS512 = "PS512",
	/** ECDSA using P-256 and SHA-256 */
	ES256 = "ES256",
	/** ECDSA using P-384 and SHA-384 */
	ES384 = "ES384",
	/** ECDSA using P-521 and SHA-512 */
	ES512 = "ES512",
	/** ECDSA using secp256k1 curve and SHA-256 */
	ES256K = "ES256K",
	/** No digital signature or MAC performed */
	NONE = "none",
	/** EdDSA signature algorithms */
	EdDSA = "EdDSA",
}


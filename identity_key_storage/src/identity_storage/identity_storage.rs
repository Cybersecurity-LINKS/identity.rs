// Copyright 2020-2023 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

use crate::identifiers::KeyId;
use crate::identifiers::MethodId;
use async_trait::async_trait;

pub use super::error::IdentityStorageError;
pub use super::error::IdentityStorageErrorKind;
pub(crate) use super::error::IdentityStorageErrorKindSplit;
pub use super::error::IdentityStorageResult;

#[async_trait(?Send)]
/// An [`IdentityStorage`] is any kind of storage that is capable of saving state generated by and necessary for the
/// IOTA Identity library.
///
/// # Important
///
/// The methods of this trait are only intended to be called internally by the IOTA Identity library. One should only
/// consider implementing this if one or more of the following scenarios applies to your use case:
///  - Your identity application needs to share and synchronize state in a distributed setup.
///  - You intend to create an immense amount of identities and/or verification methods and therefore want a custom
/// solution when it comes to persisting associated metadata.
pub trait IdentityStorage {
  /// Store a [`KeyId`](crate::key_identification::KeyId) in the [`IdentityStorage`].
  ///
  /// Attempts to overwrite an existing entry are not allowed and must produce an error.
  ///
  /// # Note
  ///
  /// This method is only intended to be called by the IOTA Identity library. All other usage may lead to undesired
  /// behaviour and subtle bugs.
  async fn store_key_id(&self, idx: MethodId, key_id: KeyId) -> IdentityStorageResult<()>;

  /// Retrieve the stored [`KeyId`] previously saved under the given `idx`.
  async fn load_key_id(&self, idx: &MethodId) -> IdentityStorageResult<KeyId>;

  /// Deletes the [`KeyId`] associated with the given [`MethodIdx`](crate::method_identifier::MethodIdx).
  ///
  /// # Warning
  ///
  /// This method is only intended to be called by the IOTA Identity library. All other usage may lead to undesired
  /// behaviour and subtle bugs.
  async fn delete_key_id(&self, method_idx: &MethodId) -> IdentityStorageResult<()>;
}
